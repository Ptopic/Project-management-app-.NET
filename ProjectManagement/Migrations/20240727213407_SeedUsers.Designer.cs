// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProjectManagement.Data;

#nullable disable

namespace ProjectManagement.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240727213407_SeedUsers")]
    partial class SeedUsers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.3.24172.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a6cb3476-9c3d-489d-8092-8036b303325b",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "45b9ac83-d043-4e9a-a6fa-c01af2789963",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "bb19e8c6-fda7-4bab-8e86-be75f6465ae7",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "97e0ae24-f7e2-4ad5-a1ee-570856fcf874",
                            RoleId = "a6cb3476-9c3d-489d-8092-8036b303325b"
                        },
                        new
                        {
                            UserId = "95fd4abd-0626-49fd-956c-19438402a603",
                            RoleId = "45b9ac83-d043-4e9a-a6fa-c01af2789963"
                        },
                        new
                        {
                            UserId = "1f7ec708-e841-4ab2-846f-05c24fa18301",
                            RoleId = "45b9ac83-d043-4e9a-a6fa-c01af2789963"
                        },
                        new
                        {
                            UserId = "e58ea87d-6a8f-49e0-939c-20d89f995574",
                            RoleId = "bb19e8c6-fda7-4bab-8e86-be75f6465ae7"
                        },
                        new
                        {
                            UserId = "f8d480c5-ebe1-45e3-a804-a9badf390003",
                            RoleId = "bb19e8c6-fda7-4bab-8e86-be75f6465ae7"
                        },
                        new
                        {
                            UserId = "c33ee900-c261-4195-b8d6-2ac802657d95",
                            RoleId = "bb19e8c6-fda7-4bab-8e86-be75f6465ae7"
                        },
                        new
                        {
                            UserId = "318f8ee8-cb12-4d95-9123-1d911a167f3f",
                            RoleId = "bb19e8c6-fda7-4bab-8e86-be75f6465ae7"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProjectManagement.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ManagerId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("TeamId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("ProjectManagement.Entities.TaskDefinition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AssigneeId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AssigneeId");

                    b.HasIndex("ProjectId");

                    b.ToTable("TasksDefinitions");
                });

            modelBuilder.Entity("ProjectManagement.Entities.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("ProjectManagement.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uuid");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("TeamId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "97e0ae24-f7e2-4ad5-a1ee-570856fcf874",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b2e64761-4858-4c98-ae19-75c115550f98",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELzB3QAo6SG24a7Cod9dkh7ZJw10rohZ0HG3Mr4e8WdpTDqrpbYruS/I0Xr0VdQOzQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "653634fa-b226-4787-b79c-59b14ecde51c",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        },
                        new
                        {
                            Id = "95fd4abd-0626-49fd-956c-19438402a603",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8096b2c2-4a50-4c16-90a5-ee61e71f73bd",
                            Email = "manager@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Manager",
                            LastName = "Manager",
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGER@GMAIL.COM",
                            NormalizedUserName = "MANAGER@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOGZoeNCqpdGVYQVMqBRTLZgk8FlsxH21pOKUTL/I/heqWs20Cr5QRhY1RWRepeKTQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "05949da8-c76d-498d-977b-51879f189d8f",
                            TwoFactorEnabled = false,
                            UserName = "manager@gmail.com"
                        },
                        new
                        {
                            Id = "1f7ec708-e841-4ab2-846f-05c24fa18301",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "183208a5-2d41-4565-98a2-5e325d16a51e",
                            Email = "petar.topic@blankhq.co",
                            EmailConfirmed = true,
                            FirstName = "Manager2",
                            LastName = "Manager2",
                            LockoutEnabled = false,
                            NormalizedEmail = "PETAR.TOPIC@BLANKHQ.CO",
                            NormalizedUserName = "PETAR.TOPIC@BLANKHQ.CO",
                            PasswordHash = "AQAAAAIAAYagAAAAED6ZaLYdJxjGXGMav0T/FjrH+QToja5Cmm5qsLxumxKi8+WZk9CcAg6ZMY+xJfLc3w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "157125e7-1d6a-40c6-9c8f-f75ac6172767",
                            TwoFactorEnabled = false,
                            UserName = "petar.topic@blankhq.co"
                        },
                        new
                        {
                            Id = "e58ea87d-6a8f-49e0-939c-20d89f995574",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0b315a51-4a17-48ba-b642-56ba31f8b8f6",
                            Email = "petartopic2002@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "User",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "PETARTOPIC2002@GMAIL.COM",
                            NormalizedUserName = "PETARTOPIC2002@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELESM94DQ37tWGkGUeURwCAu1bafnjmUNbYLfBtTJqSP4HCkPBC3SNVgPsN5EgXzWw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "64cdac11-ddae-4d49-a374-13448b2245ca",
                            TwoFactorEnabled = false,
                            UserName = "petartopic2002@gmail.com"
                        },
                        new
                        {
                            Id = "f8d480c5-ebe1-45e3-a804-a9badf390003",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ddbd5743-fa19-4d1b-b814-c321bf0e010a",
                            Email = "user2@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "User2",
                            LastName = "User2",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@GMAIL.COM",
                            NormalizedUserName = "USER2@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEFWRYxtI5kTtYh5P2I+NynyBPgne3uAuf1OeBqdYOJznulsdJWtRPdg1digfSbFUA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d4b5c71e-4caa-4193-a343-00165833d15b",
                            TwoFactorEnabled = false,
                            UserName = "user2@gmail.com"
                        },
                        new
                        {
                            Id = "c33ee900-c261-4195-b8d6-2ac802657d95",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4f42d9d4-ad8d-4345-9355-11ce8829350e",
                            Email = "user3@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "User3",
                            LastName = "User3",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER3@GMAIL.COM",
                            NormalizedUserName = "USER3@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHYx7omS+CZRcUhf/i/A2Zz1IwxA8tKD9R4QRoLDPkDZT+0v2W0l2CdPSM1LtvafHg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8569ff3a-04f6-4d69-95a3-7590e3eaafa2",
                            TwoFactorEnabled = false,
                            UserName = "user3@gmail.com"
                        },
                        new
                        {
                            Id = "318f8ee8-cb12-4d95-9123-1d911a167f3f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ae7eb016-9d6b-478f-b922-d715e2507266",
                            Email = "user4@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "User4",
                            LastName = "User4",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER4@GMAIL.COM",
                            NormalizedUserName = "USER4@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFKtz2kGun2v1sSJKkPiZsZ1KDkFhQO98TQbrir7Evv8t0CWarAXALCreYwzUihItg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "89b9616b-4fc0-4496-9f7a-0009625be3d9",
                            TwoFactorEnabled = false,
                            UserName = "user4@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ProjectManagement.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ProjectManagement.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ProjectManagement.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectManagement.Entities.Project", b =>
                {
                    b.HasOne("ProjectManagement.Entities.User", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");

                    b.HasOne("ProjectManagement.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("ProjectManagement.Entities.TaskDefinition", b =>
                {
                    b.HasOne("ProjectManagement.Entities.User", "Assignee")
                        .WithMany()
                        .HasForeignKey("AssigneeId");

                    b.HasOne("ProjectManagement.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignee");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjectManagement.Entities.User", b =>
                {
                    b.HasOne("ProjectManagement.Entities.Team", "Team")
                        .WithMany("Members")
                        .HasForeignKey("TeamId");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("ProjectManagement.Entities.Team", b =>
                {
                    b.Navigation("Members");
                });
#pragma warning restore 612, 618
        }
    }
}
