// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProjectManagement.Data;

#nullable disable

namespace ProjectManagement.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240805183819_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.3.24172.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "26a8fecd-8ec7-4306-b084-aefb1c433dd4",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "9829c5c5-b566-4688-a554-f34203a9eabc",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "84a12d64-7281-48dd-a626-544f6726de28",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "97e0ae24-f7e2-4ad5-a1ee-570856fcf874",
                            RoleId = "26a8fecd-8ec7-4306-b084-aefb1c433dd4"
                        },
                        new
                        {
                            UserId = "95fd4abd-0626-49fd-956c-19438402a603",
                            RoleId = "9829c5c5-b566-4688-a554-f34203a9eabc"
                        },
                        new
                        {
                            UserId = "1f7ec708-e841-4ab2-846f-05c24fa18301",
                            RoleId = "9829c5c5-b566-4688-a554-f34203a9eabc"
                        },
                        new
                        {
                            UserId = "e58ea87d-6a8f-49e0-939c-20d89f995574",
                            RoleId = "84a12d64-7281-48dd-a626-544f6726de28"
                        },
                        new
                        {
                            UserId = "f8d480c5-ebe1-45e3-a804-a9badf390003",
                            RoleId = "84a12d64-7281-48dd-a626-544f6726de28"
                        },
                        new
                        {
                            UserId = "c33ee900-c261-4195-b8d6-2ac802657d95",
                            RoleId = "84a12d64-7281-48dd-a626-544f6726de28"
                        },
                        new
                        {
                            UserId = "318f8ee8-cb12-4d95-9123-1d911a167f3f",
                            RoleId = "84a12d64-7281-48dd-a626-544f6726de28"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProjectManagement.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ManagerId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("TeamId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("ProjectManagement.Entities.TaskDefinition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AssigneeId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AssigneeId");

                    b.HasIndex("ProjectId");

                    b.ToTable("TasksDefinitions");
                });

            modelBuilder.Entity("ProjectManagement.Entities.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = new Guid("241347d2-44a4-420c-8e0f-b27e8fdb8c1a"),
                            Name = "Team 1"
                        },
                        new
                        {
                            Id = new Guid("26f7c123-0749-4f53-892f-055d8e1fbcf0"),
                            Name = "Team 2"
                        },
                        new
                        {
                            Id = new Guid("297f0f61-1ac0-4652-9423-4fb558209d6e"),
                            Name = "Team 3"
                        });
                });

            modelBuilder.Entity("ProjectManagement.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "97e0ae24-f7e2-4ad5-a1ee-570856fcf874",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f87b2e69-a117-4ba3-8cd4-f4a17ab607ed",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN1",
                            PasswordHash = "AQAAAAIAAYagAAAAEOG5p8Wcg72aZLwsb5umrJXsCFzp8Uc+HmegQuTt+spfpki1QyxeRlvDD2IHXKavnA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "58206802-986b-496c-94bf-26b44574ef57",
                            TwoFactorEnabled = false,
                            UserName = "admin1"
                        },
                        new
                        {
                            Id = "95fd4abd-0626-49fd-956c-19438402a603",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6cf0f70e-247f-44ce-8ad4-9c56dede4201",
                            Email = "manager@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Manager",
                            LastName = "Manager",
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGER@GMAIL.COM",
                            NormalizedUserName = "MANAGER1",
                            PasswordHash = "AQAAAAIAAYagAAAAEKAQfT9s4own/oVX/NdUY/HT5BK0mkIt4j00yWHB5Iz1zF4unya3nXyZI0fk1f9Bkw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "42ea2a59-f73f-497a-ac52-47fd1d0b7eca",
                            TwoFactorEnabled = false,
                            UserName = "manager1"
                        },
                        new
                        {
                            Id = "1f7ec708-e841-4ab2-846f-05c24fa18301",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7caffe59-31a8-442e-99ca-86f4a39e12c4",
                            Email = "petar.topic@blankhq.co",
                            EmailConfirmed = true,
                            FirstName = "Manager2",
                            LastName = "Manager2",
                            LockoutEnabled = false,
                            NormalizedEmail = "PETAR.TOPIC@BLANKHQ.CO",
                            NormalizedUserName = "MANAGER2",
                            PasswordHash = "AQAAAAIAAYagAAAAEHXIbfRhCvKl6UcyTd/0PXOSqJgJnLAm6UABxNUDYXRJEf4RoWfS0h4uHa1lLduUHw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "55a95ff4-57bf-4c5c-a8f1-e595175772fc",
                            TwoFactorEnabled = false,
                            UserName = "manager2"
                        },
                        new
                        {
                            Id = "e58ea87d-6a8f-49e0-939c-20d89f995574",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f5db7eb4-6f1f-45c0-bb5b-9f592b8567f6",
                            Email = "petartopic2002@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "User",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "PETARTOPIC2002@GMAIL.COM",
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ2ODhc8oKkG1YBYs/HMerItphwpHCreXH+LP6dAmM7qYQgnpucK3h7byy0+POHnpw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "37306f06-9a60-4599-8ff1-714fbe099c35",
                            TwoFactorEnabled = false,
                            UserName = "user1"
                        },
                        new
                        {
                            Id = "f8d480c5-ebe1-45e3-a804-a9badf390003",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9b2dd471-8c70-4ead-a697-743a16cd9e28",
                            Email = "user2@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "User2",
                            LastName = "User2",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@GMAIL.COM",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAIAAYagAAAAEMg6kdn7plZgL2veTQJpHcTpC6Iev+sH6X3OeYooKBrcr9XdRLagR0LoeB6Ms+EWYA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7ec6e456-8f45-4131-b900-6c1163910e55",
                            TwoFactorEnabled = false,
                            UserName = "user2"
                        },
                        new
                        {
                            Id = "c33ee900-c261-4195-b8d6-2ac802657d95",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "734852e8-b2e3-46ca-877e-7379f056ff72",
                            Email = "user3@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "User3",
                            LastName = "User3",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER3@GMAIL.COM",
                            NormalizedUserName = "USER3",
                            PasswordHash = "AQAAAAIAAYagAAAAEMrmZR7U/hWaJxTylIPOxJf7G/Da2uWsajRF78kX+5kR2f5UgViStnXWVNTxMT6tpw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "406aa4e1-57fd-4c26-8b23-5135c7a277b5",
                            TwoFactorEnabled = false,
                            UserName = "user3"
                        },
                        new
                        {
                            Id = "318f8ee8-cb12-4d95-9123-1d911a167f3f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ce1217af-820e-4e77-8da9-a1fe432a5798",
                            Email = "user4@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "User4",
                            LastName = "User4",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER4@GMAIL.COM",
                            NormalizedUserName = "USER4",
                            PasswordHash = "AQAAAAIAAYagAAAAEOYT5IgT7/4ri9dsiKiOJNhdTu/M0oQBswVeaLWdYfmw/n3ktfR+JUepHvWeNfSCSw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "68b809da-0b47-4740-9a5c-07f53b7ec68e",
                            TwoFactorEnabled = false,
                            UserName = "user4"
                        });
                });

            modelBuilder.Entity("UserTeams", b =>
                {
                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("TeamId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTeams");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ProjectManagement.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ProjectManagement.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ProjectManagement.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectManagement.Entities.Project", b =>
                {
                    b.HasOne("ProjectManagement.Entities.User", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");

                    b.HasOne("ProjectManagement.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("ProjectManagement.Entities.TaskDefinition", b =>
                {
                    b.HasOne("ProjectManagement.Entities.User", "Assignee")
                        .WithMany()
                        .HasForeignKey("AssigneeId");

                    b.HasOne("ProjectManagement.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignee");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("UserTeams", b =>
                {
                    b.HasOne("ProjectManagement.Entities.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
